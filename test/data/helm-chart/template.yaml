---
# Source: dance/templates/openshift-gitops/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: dance-argocd
---
# Source: dance/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: helm-manager
  namespace: dance-installer
---
# Source: dance/charts/developer-hub/charts/upstream/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: installer-postgresql
  namespace: "dance-installer"
  labels:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.10.0
type: Opaque
data:
  postgres-password: "#masked#"
  password: "#masked#"
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: dance/charts/developer-hub/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: installer-developer-hub-auth
  namespace: "dance-installer"
  labels:
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: developer-hub-1.0-200-CI
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.0-200"
    app.kubernetes.io/component: backstage
  annotations:
type: Opaque
data:
  backend-secret: "#masked#"
---
# Source: dance/templates/developer-hub/quay-token.yaml
apiVersion: v1
kind: Secret
metadata:
  name: rhdh-pull-secret
data:
  .dockerconfigjson: eyAbC123...rhdh...890XyZ
type: kubernetes.io/dockerconfigjson
---
# Source: dance/charts/developer-hub/charts/upstream/templates/app-config-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: installer-developer-hub-app-config
data:
  app-config.yaml: |
    app:
      baseUrl: https://installer-developer-hub-dance-installer.apps.example.com
    backend:
      auth:
        keys:
        - secret: ${BACKEND_SECRET}
      baseUrl: https://installer-developer-hub-dance-installer.apps.example.com
      cors:
        origin: https://installer-developer-hub-dance-installer.apps.example.com
      database:
        connection:
          password: ${POSTGRESQL_ADMIN_PASSWORD}
          user: postgres
---
# Source: dance/charts/developer-hub/templates/dynamic-plugins-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: dynamic-plugins
data:
  dynamic-plugins.yaml: |
    includes:
    - dynamic-plugins.default.yaml
    plugins: []
---
# Source: dance/templates/serviceaccount.yaml
# The ServiceAccount needs to be able to manage resources that
# might not be declated until after Subscriptions have been
# deployed (e.g. TektonConfig).
#
# If the ServiceAccount did not have admin privilegers, it
# would need the permission to edit roles. An attacker
# getting access to this ServiceAccount would be able
# to grant any role to any account.
# Therefore the attack surface is not increased by giving
# the admin role to the ServiceAccount.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: helm-manager-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: helm-manager
    namespace: dance-installer
---
# Source: dance/charts/developer-hub/charts/upstream/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: installer-postgresql-hl
  namespace: "dance-installer"
  labels:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.10.0
    app.kubernetes.io/component: primary
  annotations:
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: dance/charts/developer-hub/charts/upstream/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: installer-postgresql
  namespace: "dance-installer"
  labels:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.10.0
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: primary
---
# Source: dance/charts/developer-hub/charts/upstream/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: installer-developer-hub
  namespace: "dance-installer" 
  labels:
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: upstream-1.8.0
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backstage
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-backend
      port: 7007
      targetPort: backend
      protocol: TCP
      nodePort: null  
  selector:
    app.kubernetes.io/name: developer-hub
    app.kubernetes.io/instance: installer
    app.kubernetes.io/component: backstage
---
# Source: dance/charts/developer-hub/charts/upstream/templates/backstage-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: installer-developer-hub
  namespace: "dance-installer"
  labels: 
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: upstream-1.8.0
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: backstage
  annotations:
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: developer-hub
      app.kubernetes.io/instance: installer
      app.kubernetes.io/component: backstage
  template:
    metadata:
      labels:
        app.kubernetes.io/name: developer-hub
        helm.sh/chart: upstream-1.8.0
        app.kubernetes.io/instance: installer
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: backstage
      annotations:
        checksum/app-config: 28661b8d257d16030d058df4a7416ee91bd10d2e283801b5d6bb98f7cb70987c
        checksum/dynamic-plugins: 'f1f9a92f14a31362d7eb30e67ac1458faf1c685765610f93a8967194d8bc1a5f'
    spec:
      serviceAccountName: default
      volumes:
        - ephemeral:
            volumeClaimTemplate:
              spec:
                accessModes:
                - ReadWriteOnce
                resources:
                  requests:
                    storage: 1Gi
          name: dynamic-plugins-root
        - configMap:
            defaultMode: 420
            name: dynamic-plugins
            optional: true
          name: dynamic-plugins
        - name: dynamic-plugins-npmrc
          secret:
            defaultMode: 420
            optional: true
            secretName: dynamic-plugins-npmrc
        - name: backstage-app-config
          configMap:
            name: installer-developer-hub-app-config
      
      imagePullSecrets:
        - name: rhdh-pull-secret
      initContainers:
        - command:
          - ./install-dynamic-plugins.sh
          - /dynamic-plugins-root
          env:
          - name: NPM_CONFIG_USERCONFIG
            value: /opt/app-root/src/.npmrc.dynamic-plugins
          image: 'quay.io/rhdh/rhdh-hub-rhel9:1.0-200'
          imagePullPolicy: Always
          name: install-dynamic-plugins
          volumeMounts:
          - mountPath: /dynamic-plugins-root
            name: dynamic-plugins-root
          - mountPath: /opt/app-root/src/dynamic-plugins.yaml
            name: dynamic-plugins
            readOnly: true
            subPath: dynamic-plugins.yaml
          - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
            name: dynamic-plugins-npmrc
            readOnly: true
            subPath: .npmrc
          workingDir: /opt/app-root/src
      containers:
        - name: backstage-backend
          image: quay.io/rhdh/rhdh-hub-rhel9:1.0-200
          imagePullPolicy: "Always"
          args:
            - "--config"
            - "dynamic-plugins-root/app-config.dynamic-plugins.yaml"
            - "--config"
            - "/opt/app-root/src/app-config-from-configmap.yaml"
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthcheck
              port: 7007
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 2
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthcheck
              port: 7007
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          env:
            - name: APP_CONFIG_backend_listen_port
              value: "7007"
            - name: POSTGRES_HOST
              value: installer-postgresql
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              value: bn_backstage
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: installer-postgresql
                  key: password
            - name: BACKEND_SECRET
              valueFrom:
                secretKeyRef:
                  key: backend-secret
                  name: 'installer-developer-hub-auth'
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: 'installer-postgresql'
          ports:
            - name: backend
              containerPort: 7007
              protocol: TCP
          volumeMounts:
            - name: backstage-app-config
              mountPath: "/opt/app-root/src/app-config-from-configmap.yaml"
              subPath: app-config.yaml
            - mountPath: /opt/app-root/src/dynamic-plugins-root
              name: dynamic-plugins-root
---
# Source: dance/charts/developer-hub/charts/upstream/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: installer-postgresql
  namespace: "dance-installer"
  labels:
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 15.4.0
    helm.sh/chart: postgresql-12.10.0
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: installer-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: installer
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: installer-postgresql
      labels:
        app.kubernetes.io/instance: installer
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/version: 15.4.0
        helm.sh/chart: postgresql-12.10.0
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: installer
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: registry.redhat.io/rhel9/postgresql-15:latest
          imagePullPolicy: "IfNotPresent"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/var/lib/pgsql/data"
            - name: PGDATA
              value: "/var/lib/pgsql/data/userdata"
            # Authentication
            - name: POSTGRES_USER
              value: "bn_backstage"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: installer-postgresql
                  key: password
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: installer-postgresql
                  key: postgres-password
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: 'installer-postgresql'
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "bn_backstage" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "bn_backstage" -h 127.0.0.1 -p 5432
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /var/lib/pgsql/data
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "1Gi"
---
# Source: dance/charts/developer-hub/templates/route.yaml
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: installer-developer-hub
  namespace: "dance-installer"
  labels:
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: developer-hub-1.0-200-CI
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.0-200"
    app.kubernetes.io/component: backstage
spec:
  host: 
  path: /
  port:
    targetPort: http-backend
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
  to:
    kind: Service
    name: installer-developer-hub
    weight: 100
  wildcardPolicy: None
---
# Source: dance/templates/openshift-gitops/subscription.yaml
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: openshift-gitops-operator
  namespace: openshift-operators
spec:
  channel: gitops-1.11
  installPlanApproval: Automatic
  name: openshift-gitops-operator
  source: redhat-operators
  sourceNamespace: openshift-marketplace
---
# Source: dance/templates/openshift-pipelines/subscription.yaml
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: openshift-pipelines-operator
  namespace: openshift-operators
spec:
  channel: pipelines-1.13
  installPlanApproval: Automatic
  name: openshift-pipelines-operator-rh
  source: redhat-operators
  sourceNamespace: openshift-marketplace
---
# Source: dance/charts/developer-hub/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "installer-developer-hub-test-connection"
  labels:
    app.kubernetes.io/name: developer-hub
    helm.sh/chart: developer-hub-1.0-200-CI
    app.kubernetes.io/instance: installer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "1.0-200"
    app.kubernetes.io/component: backstage
  annotations:
      helm.sh/hook: test
spec:
  containers:
    - name: curl
      image: registry.redhat.io/ubi9:latest
      command: ["/bin/sh", "-c"]
      args:
        - |
          curl --connect-timeout 5 --max-time 20 --retry 20 --retry-delay 10 --retry-max-time 60 --retry-all-errors installer-developer-hub:7007
  restartPolicy: Never
---
# Source: dance/templates/configure.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "dance-installer-configure"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "installer"
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: "dance-0.4.2"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: "installer-configure"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "installer"
        helm.sh/chart: "dance-0.4.2"
    spec:
      containers:
                
        - name: configure-gitops
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/sh
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
        
              echo -n "* Installing 'argocd' CLI: "
              curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
              chmod 555 argocd
              ./argocd version --client | head -1 | cut -d' ' -f2
              
              CRD="argocds"
              echo -n "* Waiting for '$CRD' CRD: "
              while [ $(kubectl api-resources | grep -c "^$CRD ") = "0" ] ; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              echo -n "* Waiting for gitops operator deployment: "
              until kubectl get "$CRD" openshift-gitops -n openshift-gitops >/dev/null 2>&1; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              #
              # All actions must be idempotent
              #
              CHART="dance"
              ARGOCD_NAMESPACE="dance-argocd"
              echo -n "* ArgoCD resource: "
              until kubectl get namespace "$ARGOCD_NAMESPACE" >/dev/null 2>&1; do
                echo -n "."
                sleep 3
              done
              cat << EOF | kubectl apply -n "$ARGOCD_NAMESPACE" -f - >/dev/null
                      
                apiVersion: argoproj.io/v1beta1
                kind: ArgoCD
                metadata:
                  name: dance-argocd
                spec:
                  server:
                    autoscale:
                      enabled: false
                    grpc:
                      ingress:
                        enabled: false
                    ingress:
                      enabled: false
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 125m
                        memory: 128Mi
                    route:
                      enabled: true
                    service:
                      type: ''
                  grafana:
                    enabled: false
                    ingress:
                      enabled: false
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 250m
                        memory: 128Mi
                    route:
                      enabled: false
                  monitoring:
                    enabled: false
                  notifications:
                    enabled: false
                  prometheus:
                    enabled: false
                    ingress:
                      enabled: false
                    route:
                      enabled: false
                  initialSSHKnownHosts: {}
                  sso:
                    dex:
                      openShiftOAuth: true
                      resources:
                        limits:
                          cpu: 500m
                          memory: 256Mi
                        requests:
                          cpu: 250m
                          memory: 128Mi
                    provider: dex
                  applicationSet:
                    resources:
                      limits:
                        cpu: '2'
                        memory: 1Gi
                      requests:
                        cpu: 250m
                        memory: 512Mi
                    webhookServer:
                      ingress:
                        enabled: false
                      route:
                        enabled: false
                  rbac:
                    defaultPolicy: ''
                    policy: |
                      g, system:cluster-admins, role:admin
                      g, cluster-admins, role:admin
                    scopes: '[groups]'
                  repo:
                    resources:
                      limits:
                        cpu: '1'
                        memory: 1Gi
                      requests:
                        cpu: 250m
                        memory: 256Mi
                  resourceExclusions: |
                    - apiGroups:
                      - tekton.dev
                      clusters:
                      - '*'
                      kinds:
                      - TaskRun
                      - PipelineRun
                  ha:
                    enabled: false
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 250m
                        memory: 128Mi
                  tls:
                    ca: {}
                  redis:
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 250m
                        memory: 128Mi
                  controller:
                    processors: {}
                    resources:
                      limits:
                        cpu: '2'
                        memory: 2Gi
                      requests:
                        cpu: 250m
                        memory: 1Gi
                  extraConfig:
                    accounts.admin-dance: apiKey
                
              EOF
              echo "OK"
        
              echo -n "* ArgoCD dashboard: "
              test_cmd="kubectl get route -n  "$ARGOCD_NAMESPACE" "$CHART-argocd-server" --ignore-not-found -o jsonpath={.spec.host}"
              argocd_hostname="$(${test_cmd})"
              until curl --fail --insecure --output /dev/null --silent "https://$argocd_hostname"; do
                echo -n "."
                sleep 2
                argocd_hostname="$(${test_cmd})"
              done
              echo "OK"
        
              echo -n "* ArgoCD Login: "
              argocd_password="$(kubectl get secret -n "$ARGOCD_NAMESPACE" "$CHART-argocd-cluster" -o jsonpath="{.data.admin\.password}" | base64 --decode)"
              ./argocd login "$argocd_hostname" --grpc-web --insecure --username admin --password "$argocd_password" >/dev/null
              echo "OK"
              # echo "argocd login '$argocd_hostname' --grpc-web --insecure --username admin --password '$argocd_password'"
        
              echo -n "* ArgoCD 'admin-$CHART' token: "
              if [ "$(kubectl get secret "$CHART-argocd-secret" -o name --ignore-not-found | wc -l)" = "0" ]; then
                echo -n "." 
                API_TOKEN="$(./argocd account generate-token --account "admin-$CHART")"
                echo -n "."
                kubectl create secret generic "$CHART-argocd-secret" \
                  --from-literal="admin-$CHART=$API_TOKEN" >/dev/null
              fi
              echo "OK"
        
              echo -n "* Disable ArgoCD admin user: "
              kubectl patch argocd -n "$ARGOCD_NAMESPACE" "$CHART-argocd" --type 'merge' --patch '        
                {
                  "spec": {
                    "extraConfig": {
                      "admin.enabled": "false"
                    }
                  }
                }
                ' >/dev/null
              echo "OK"
        
              echo
              echo "Configuration successful"
        
                
        - name: configure-acs
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
        
              CRDS=( pipelines tasks )
              for CRD in "${CRDS[@]}"; do
                echo -n "* Waiting for '$CRD' CRD: "
                while [ $(kubectl api-resources | grep -c "^$CRD ") = "0" ] ; do
                  echo -n "."
                  sleep 3
                done
                echo "OK"
              done
        
              echo -n "* Configuring Tasks: "
              cat << EOF | kubectl apply -f - >/dev/null
                      
                apiVersion: tekton.dev/v1
                kind: Task
                metadata:
                  name: acs-deploy-check
                spec:
                  description: >-
                    Policy check a deployment with StackRox/RHACS This tasks allows you to check
                    a deployment against build-time policies and apply enforcement to fail
                    builds. It's a companion to the stackrox-image-scan task, which returns full
                    vulnerability scan results for an image.
                  params:
                    - default:  "central.acs.mycluster.com:443"
                      description: |
                        Secret containing the address:port tuple for StackRox Central
                        (example - rox.stackrox.io:443)
                      name: rox_central_endpoint
                      type: string
                    - default: "eyAbC123...acs...890XyZ"
                      description: |
                        Secret containing the StackRox API token with CI permissions
                      name: rox_api_token
                      type: string
                    - description: |
                        URL to the deployment
                        (example - https://raw.gitlab.mycompany.com/myorg/myapp/mybranch/argocd/mycomponent/myenv/deployment.yaml)
                      name: deployment_url
                      type: string
                    - default: 'false'
                      description: |
                        When set to \`"true"\`, skip verifying the TLS certs of the Central
                        endpoint.  Defaults to \`"false"\`.
                      name: insecure-skip-tls-verify
                      type: string
                  results:
                    - description: Output of \`roxctl deployment check\`
                      name: check_output
                  steps:
                    - env:
                      - name: ROX_API_TOKEN
                        value: \$(params.rox_api_token)
                      - name: ROX_ENDPOINT
                        value: \$(params.rox_central_endpoint)
                      image: registry.access.redhat.com/ubi8/ubi-minimal
                      name: rox-deploy-scan
                      script: |
                        #!/usr/bin/env bash
                        set -o errexit
                        set -o nounset
                        set -o pipefail
                
                        curl -s -k -L -H "Authorization: Bearer \$ROX_API_TOKEN" \
                          "https://\$ROX_ENDPOINT/api/cli/download/roxctl-linux" \
                          --output ./roxctl  \
                          > /dev/null
                        chmod +x ./roxctl  > /dev/null
                
                        curl --fail --insecure --location --output deployment.yaml --silent "\$(params.deployment_url)"
                
                        ./roxctl deployment check \
                          \$(
                            [ "\$(params.insecure-skip-tls-verify)" = "true" ] && \
                            echo -n "--insecure-skip-tls-verify"
                          ) \
                          --file "deployment.yaml" \
                          --output json > check.log
                          cat check.log
                      workingDir: /tmp
                
              EOF
              echo -n "."
              cat << EOF | kubectl apply -f - >/dev/null
                      
                apiVersion: tekton.dev/v1
                kind: Task
                metadata:
                  name: acs-image-check
                spec:
                  description: |
                    Policy check an image with StackRox/RHACS This tasks allows you to
                    check an image against build-time policies and apply enforcement to fail builds.
                    It's a companion to the acs-image-scan task, which returns full vulnerability
                    scan results for an image.
                  params:
                  - default: "central.acs.mycluster.com:443"
                    description: |
                      Secret containing the address:port tuple for StackRox Central
                      (example - rox.stackrox.io:443)
                    name: rox_central_endpoint
                    type: string
                  - default: "eyAbC123...acs...890XyZ"
                    description: |
                      Secret containing the StackRox API token with CI permissions
                    name: rox_api_token
                    type: string
                  - description: |
                      Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
                    name: image
                    type: string
                  - default: "false"
                    description: |
                      When set to \`"true"\`, skip verifying the TLS certs of the Central
                      endpoint.  Defaults to \`"false"\`.
                    name: insecure-skip-tls-verify
                    type: string
                  - description: |
                      Digest of the image
                    name: image_digest
                    type: string
                  results:
                  - description: Output of \`roxctl image check\`
                    name: check_output
                  steps:
                  - env:
                    - name: ROX_API_TOKEN
                      value: \$(params.rox_api_token)
                    - name: ROX_ENDPOINT
                      value: \$(params.rox_central_endpoint)
                    image: registry.access.redhat.com/ubi8/ubi-minimal
                    name: rox-image-check
                    workingDir: /tmp
                    script: |
                      #!/usr/bin/env bash
                      set -o errexit
                      set -o nounset
                      set -o pipefail
                      set -x
                
                      # Install roxctl
                      curl --fail --insecure --location --silent \
                        --header "Authorization: Bearer \$ROX_API_TOKEN" \
                        --output ./roxctl  \
                        "https://\$ROX_ENDPOINT/api/cli/download/roxctl-linux" \
                        > /dev/null
                      chmod +x ./roxctl  > /dev/null
                
                      # Check image
                      IMAGE=\$(params.image)@\$(params.image_digest)
                      ./roxctl image scan --force \
                        \$(
                          [ "\$(params.insecure-skip-tls-verify)" = "true" ] && \
                          echo -n "--insecure-skip-tls-verify"
                        ) \
                        --image "\$IMAGE" \
                        --output json > check.log
                
                      cat check.log
                
              EOF
              echo -n "."
              cat << EOF | kubectl apply -f - >/dev/null
                      
                apiVersion: tekton.dev/v1
                kind: Task
                metadata:
                  name: acs-image-scan
                spec:
                  description: |
                    Retrun a full vulnerability scan results for an image.
                  params:
                  - default: "central.acs.mycluster.com:443"
                    description: |
                      Secret containing the address:port tuple for StackRox Central
                      (example - rox.stackrox.io:443)
                    name: rox_central_endpoint
                    type: string
                  - default: "eyAbC123...acs...890XyZ"
                    description: |
                      Secret containing the StackRox API token with CI permissions
                    name: rox_api_token
                    type: string
                  - description: |
                      Full name of image to scan (example -- gcr.io/rox/sample:5.0-rc1)
                    name: image
                    type: string
                  - default: "false"
                    description: |
                      When set to \`"true"\`, skip verifying the TLS certs of the Central
                      endpoint.  Defaults to \`"false"\`.
                    name: insecure-skip-tls-verify
                    type: string
                  - description: |
                      Digest of the image
                    name: image_digest
                    type: string
                  results:
                  - description: Output of \`roxctl image check\`
                    name: check_output
                  steps:
                  - env:
                    - name: ROX_API_TOKEN
                      value: \$(params.rox_api_token)
                    - name: ROX_ENDPOINT
                      value: \$(params.rox_central_endpoint)
                    image: registry.access.redhat.com/ubi8/ubi-minimal
                    name: rox-image-check
                    workingDir: /tmp
                    script: |
                      #!/usr/bin/env bash
                      set -o errexit
                      set -o nounset
                      set -o pipefail
                      set -x
                
                      # Install roxctl
                      curl --fail --insecure --location --silent \
                        --header "Authorization: Bearer \$ROX_API_TOKEN" \
                        --output ./roxctl  \
                        "https://\$ROX_ENDPOINT/api/cli/download/roxctl-linux" \
                        > /dev/null
                      chmod +x ./roxctl  > /dev/null
                
                      # Scan image
                      IMAGE=\$(params.image)@\$(params.image_digest)
                      ./roxctl image scan --force \
                        \$(
                          [ "\$(params.insecure-skip-tls-verify)" = "true" ] && \
                          echo -n "--insecure-skip-tls-verify"
                        ) \
                        --image "\$IMAGE" \
                        --output json > scan.log
                
                      cat scan.log
                
              EOF
              echo -n "."
              echo "OK"
        
              echo
              echo "Configuration successful"
        
                
        
        - name: configure-developer-hub
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
        
              echo -n "* Waiting for route: "
              until kubectl get route installer-developer-hub -o name --ignore-not-found >/dev/null ; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              echo -n "* Waiting for UI: "
              URL="https://$(kubectl get route installer-developer-hub -o jsonpath='{.spec.host}')"
              until curl --fail --location --output /dev/null --silent "$URL"; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              echo
              echo "Configuration successful"
        
        
                
        - name: configure-namespace
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
        
              CRDS=( pipelines tasks )
              for CRD in "${CRDS[@]}"; do
                echo -n "* Waiting for '$CRD' CRD: "
                while [ $(kubectl api-resources | grep -c "^$CRD ") = "0" ] ; do
                  echo -n "."
                  sleep 3
                done
                echo "OK"
              done
        
              echo -n "* Configuring Tasks: "
              cat << EOF | kubectl apply -f - >/dev/null
                      
                apiVersion: tekton.dev/v1
                kind: Task
                metadata:
                  name: dance-namespace-setup
                spec:
                  description: >-
                    Create the required resources for dance tasks to run in a namespace.
                  params:
                    - description: |
                        Secret containing the address:port tuple for StackRox Central
                        (example - rox.stackrox.io:443)
                      name: acs_central_endpoint
                      type: string
                    - description: |
                        Secret containing the StackRox API token with CI permissions
                      name: acs_api_token
                      type: string
                  steps:
                    - env:
                      - name: ROX_API_TOKEN
                        value: \$(params.acs_api_token)
                      - name: ROX_ENDPOINT
                        value: \$(params.acs_central_endpoint)
                      image: "k8s.gcr.io/hyperkube:v1.12.1"
                      name: setup
                      script: |
                        #!/usr/bin/env bash
                        set -o errexit
                        set -o nounset
                        set -o pipefail
                        
                        echo "Generating secret: "
                        kubectl create secret generic dance-config \
                          --from-literal=rox_central_endpoint=\$ROX_ENDPOINT \
                          --from-literal=rox_api_token=\$ROX_API_TOKEN \
                          --dry-run -o yaml | kubectl apply -f - >/dev/null
                        echo "OK"
                
                        echo "Namespace is ready to execute dance pipelines"
                      workingDir: /tmp
                
              EOF
              echo -n "."
              echo "OK"
        
              echo
              echo "Configuration successful"
        
                
        - name: configure-pipelines
          image: "k8s.gcr.io/hyperkube:v1.12.1"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
        
              CRD="tektonconfigs"
              echo -n "* Waiting for '$CRD' CRD: "
              while [ $(kubectl api-resources | grep -c "^$CRD ") = "0" ] ; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              echo -n "* Waiting for pipelines operator deployment: "
              until kubectl get "$CRD" config -n openshift-pipelines >/dev/null 2>&1; do
                echo -n "."
                sleep 3
              done
              echo "OK"
        
              # All actions must be idempotent
              echo -n "* Update the TektonConfig resource: "
              kubectl patch "$CRD" config --type 'merge' --patch '        
                {
                  "spec": {
                    "pipeline": {
                      "enable-bundles-resolver": true,
                      "enable-cluster-resolver": true,
                      "enable-custom-tasks": true,
                      "enable-git-resolver": true,
                      "enable-hub-resolver": true,
                      "enable-tekton-oci-bundles": true
                    },
                    "chain": {
                      "artifacts.oci.storage": "oci",
                      "artifacts.pipelinerun.format": "in-toto",
                      "artifacts.pipelinerun.storage": "oci",
                      "artifacts.taskrun.format": "in-toto",
                      "artifacts.taskrun.storage": "oci",
                      "transparency.enabled": "true",
                      "transparency.url": "http://rekor-server.rekor.svc"
                    }
                  }
                }
                ' >/dev/null
              echo "OK"
        
              echo
              echo "Configuration successful"
        
      restartPolicy: Never
      serviceAccountName: helm-manager
---
# Source: dance/templates/test.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: "dance-installer-test"
  labels:
    app.kubernetes.io/managed-by: "Helm"
    app.kubernetes.io/instance: "installer"
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: "dance-0.4.2"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    helm.sh/hook: test
spec:
  template:
    metadata:
      name: "installer-test"
      labels:
        app.kubernetes.io/managed-by: "Helm"
        app.kubernetes.io/instance: "installer"
        helm.sh/chart: "dance-0.4.2"
    spec:
      containers:
                
        - name: test-namespace
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
        
              pipeline_id="$(cat << EOF | kubectl create -f - | cut -d' ' -f 1
                      
                apiVersion: tekton.dev/v1
                kind: PipelineRun
                metadata:
                  generateName: dance-namespace-setup-
                spec:
                  pipelineSpec:
                    tasks:
                      - name: configure-namespace
                        taskRef:
                          resolver: cluster
                          params:
                            - name: kind
                              value: task
                            - name: name
                              value: dance-namespace-setup
                            - name: namespace
                              value: dance-installer
                        params:
                          - name: acs_central_endpoint
                            value: central.acs.mycluster.com:443
                          - name: acs_api_token
                            value: eyAbC123...acs...890XyZ
                
              EOF
              )"
              echo -n "* Pipeline $pipeline_id: "
              while ! kubectl get "$pipeline_id" | grep --extended-regex --quiet " False | True "; do
                echo -n "."
                sleep 2
              done
              if kubectl get "$pipeline_id" | grep --quiet " True "; then
                kubectl delete "$pipeline_id" > /dev/null
                echo "OK"
              else
                echo "Failed"
                exit 1
              fi
        
                
        - name: test-acs
          image: "quay.io/codeready-toolchain/oc-client-base:latest"
          command:
            - /bin/bash
            - -c
            - |
              set -o errexit
              set -o nounset
              set -o pipefail
        
              pipeline_id="$(cat << EOF | kubectl create -f - | cut -d' ' -f 1
                      
                # oc create -n dance-installer -f acs-pipelinerun.yaml
                apiVersion: tekton.dev/v1
                kind: PipelineRun
                metadata:
                  generateName: acs-test-
                spec:
                  pipelineSpec:
                    tasks:
                    - name: deploy-check
                      taskRef:
                        resolver: cluster
                        params:
                          - name: kind
                            value: task
                          - name: name
                            value: acs-deploy-check
                          - name: namespace
                            value: dance-installer
                      params:
                        - name: deployment_url
                          value: https://raw.githubusercontent.com/jduimovich/quarkus-1/main/argocd/components/q/base/deployment.yaml
                        - name: insecure-skip-tls-verify
                          value: true
                    - name: image-check
                      taskRef:
                        resolver: cluster
                        params:
                          - name: kind
                            value: task
                          - name: name
                            value: acs-image-check
                          - name: namespace
                            value: dance-installer
                      params:
                        - name: image
                          value: quay.io/team-helium/miner
                        - name: image_digest
                          value: sha256:19bffd927a8dc70be5995eeba4ede675f57eca6222329477a50d65dc06880e3c
                        - name: insecure-skip-tls-verify
                          value: true
                    - name: image-scan
                      taskRef:
                        resolver: cluster
                        params:
                          - name: kind
                            value: task
                          - name: name
                            value: acs-image-scan
                          - name: namespace
                            value: dance-installer
                      params:
                        - name: image
                          value: quay.io/team-helium/miner
                        - name: image_digest
                          value: sha256:19bffd927a8dc70be5995eeba4ede675f57eca6222329477a50d65dc06880e3c
                        - name: insecure-skip-tls-verify
                          value: true
                
              EOF
              )"
              echo -n "* Pipeline $pipeline_id: "
              while ! kubectl get "$pipeline_id" | grep --extended-regex --quiet " False | True "; do
                echo -n "."
                sleep 2
              done
              if kubectl get "$pipeline_id" | grep --quiet " True "; then
                kubectl delete "$pipeline_id" > /dev/null
                echo "OK"
              else
                echo "Failed"
                exit 1
              fi
        
      restartPolicy: Never
      serviceAccountName: helm-manager
